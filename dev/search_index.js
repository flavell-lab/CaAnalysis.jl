var documenterSearchIndex = {"docs":
[{"location":"#CaAnalysis.jl-Documentation","page":"CaAnalysis.jl Documentation","title":"CaAnalysis.jl Documentation","text":"","category":"section"},{"location":"","page":"CaAnalysis.jl Documentation","title":"CaAnalysis.jl Documentation","text":"The CaAnalysis.jl package provides a collection of utilities for processing recorded GCaMP traces, such as bleach-correction, ratiometric division by marker channels, and background-subtraction.","category":"page"},{"location":"","page":"CaAnalysis.jl Documentation","title":"CaAnalysis.jl Documentation","text":"Pages = [\"noise_correction.md\"]","category":"page"},{"location":"noise_correction/#Noise-correction-API","page":"Noise correction API","title":"Noise correction API","text":"","category":"section"},{"location":"noise_correction/","page":"Noise correction API","title":"Noise correction API","text":"process_traces\ndivide_by_marker_signal\nget_background\nbkg_subtract\nnormalize_traces\ninterpolate_traces\nzscore_traces\nget_all_values\nget_laser_intensity\nfit_bleach\nfit_bleach!","category":"page"},{"location":"noise_correction/#CaAnalysis.process_traces","page":"Noise correction API","title":"CaAnalysis.process_traces","text":"process_traces(\n    param::Dict, activity_traces::Dict, marker_traces::Dict, threshold::Real, t_range; \n    activity_bkg=nothing, marker_bkg=nothing, min_intensity::Real=0, interpolate::Bool=false, \n    denoise::Bool=false, bleach_corr::Bool=false, divide::Bool=false, normalize_fn::Function=x->quantile(x,0.2),\n    k::Union{Real,Nothing}=nothing, valid_rois=nothing\n)\n\nApplies multiple data processing steps to the traces. The order of processing steps is:\n\nBackground-subtraction\nDelete low S/N neurons\nDelete neurons detected in too few time points\nInterpolate traces at missing data points\nDenoise\nBleach-correct\nDivide activity by marker channel\nNormalize\nDeconvolve\nZscore\n\nArguments\n\nparam::Dict: Parameter dictionary containing laser information.\nactivity_traces::Dict: traces in the activity channel\nmarker_traces::Dict: traces in the marker channel\nthreshold::Real: Number of timepoint detections necessary to include a neuron in the analysis\nt_range: Time points to extract traces over.\n\nKeyword arguments\n\nactivity_bkg: Background in activity channel. If left blank, background will not be subtracted.\nmarker_bkg: Background in marker channel. If left blank, background will not be subtracted.\nmin_intensity::Real: Minimum average intensity in the activity channel for a neuron (after background subtraction).   Neurons with less than this much signal will be removed. Default 0. \ninterpolate::Bool: Whether to interpolate missing data points within the time range.\ndenoise::Bool: Whether to apply a total variation denoising step.\nbleach_corr::Bool: Whether to bleach-correct the traces.\ndivide::Bool: Whether to divide the activity channel traces by the marker channel traces.\nnormalize_fn::Function: Function to use to get \"average\" activity when normalizing traces.\nk::Union{Real,Nothing}: Deconvolution parameter. Set this to (time length of confocal volume) / (GCaMP decay half-life)\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.divide_by_marker_signal","page":"Noise correction API","title":"CaAnalysis.divide_by_marker_signal","text":"divide_by_marker_signal(traces::Dict, marker_traces::Dict)\n\nDivides the activity traces traces::Dict by the marker signal marker_traces::Dict\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.get_background","page":"Noise correction API","title":"CaAnalysis.get_background","text":"get_background(timepts, get_basename::Function, nrrd_path::String, ch::Int)\n\nGets the background camera intensity from the NRRD files to be subtracted.\n\nArguments\n\ntimepts: Time points to get background of\nget_basename::Function: Function that outputs the name of the NRRD file from the time and channel\nnrrd_path::String: Path to NRRD files\nch::Int: Channel\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.bkg_subtract","page":"Noise correction API","title":"CaAnalysis.bkg_subtract","text":"bkg_subtract(traces::Dict, frame_bkg)\n\nSubtracts from traces the corresponding background frame_bkg.\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.normalize_traces","page":"Noise correction API","title":"CaAnalysis.normalize_traces","text":"normalize_traces(traces; zero::Bool=false, fn::Function=mean)\n\nNormalizes traces.\n\nArguments\n\ntraces::Dict: Traces to normalize\n\nOptional keyword arguments\n\nzero::Bool: Whether to normalize to zero (so activities that are less than average would be negative). Default false.\nfn::Function: Function that determines average neuron activity\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.interpolate_traces","page":"Noise correction API","title":"CaAnalysis.interpolate_traces","text":"interpolate_traces(traces::Dict, t_range; itp_method=Linear(), extrap_method=Interpolations.Flat(), fill_val=NaN)\n\nInterpolates data at missing time points.\n\nArguments\n\ntraces::Dict: Dictionary containing for each neuron a set of time points and activity values at those time points\nt_range: Time points to interpolate to. Time points outside this range will be set to fill_val\nitp_method (optional, default Linear()): Interpolation method.\nextrap_method (optional, default Interpolations.Flat()): Extrapolation method (for interpolating data points outside all time points the neuron was detected in)\nfill_val (optional, default NaN): Value to fill time points outside the interpolation range.\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.zscore_traces","page":"Noise correction API","title":"CaAnalysis.zscore_traces","text":"zscore_traces(traces)\n\nZ-scores traces.\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.get_all_values","page":"Noise correction API","title":"CaAnalysis.get_all_values","text":"get_all_values(processed_traces)\n\nGets all values from a set of processed traces. Ensure that the traces have been normalized prior to using this function!\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.get_laser_intensity","page":"Noise correction API","title":"CaAnalysis.get_laser_intensity","text":"get_laser_intensity(percent_on, laser)\n\nInterpolate laser intensity from percentage on, and from measurements.\n\n\n\n\n\nget_laser_intensity(percent_on, intensity, laser_perc; zero_thresh=4.5, min_laser=5.2, max_laser=20.0, max_interpolate=2.0)\n\nInterpolate laser intensity from percent_on, and from intensity measurments taken at laser_perc values.\n\nArguments:\n\npercent_on: Laser percentage used in data acquisition.\nintensity: Measured calibration intensities.\nlaser_perc: Measured laser percentages corresponding to those intensities.\nzero_thresh (optional, default 4.5): Maximum percentage to use for 0 calibration\nmin_laser (optional, default 5.2): Minimum percentage to use for linear calibration\nmax_interpolate (optional, default 2.0): Maximum laser percentage difference to use for linear interpolation\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.fit_bleach","page":"Noise correction API","title":"CaAnalysis.fit_bleach","text":"fit_bleach(f, t, plot_fit=true, use_mono=false, quantile_norm=0.5)\n\nFits double exponential bleaching model.\n\nArguments\n\nf: 1D data to fit the bleaching model\nt: Time points\nplot_fit: plot fit result if true\nuse_mono: use mono exponential model instead of double exponential model if true\n\n\n\n\n\nfit_bleach(f::Array{<:Real,2}, plot_fit=true, use_mono=false; idx_t=:all)\n\nCalculates mean activity across the units and fits the double exponential bleaching model.\n\nArguments\n\nf: N x T data array. N: number of units, T: number of time points.\nplot_fit: plot fit result if true\nuse_mono: use mono exponential model instead of double exponential model if true\n\n\n\n\n\n","category":"function"},{"location":"noise_correction/#CaAnalysis.fit_bleach!","page":"Noise correction API","title":"CaAnalysis.fit_bleach!","text":"fit_bleach!(data_dict::Dict, plot_fit=true, use_mono=false; data_key=\"f_denoised\", idx_unit=:ok, idx_t=:all)\n\nCalculates mean activity across the units and fits the double exponential.\n\nArguments\n\ndata_dict: data_dictionary.\nplot_fit: plot fit result if true\nidx_unit: see get_idx_unit()\nidx_t: see get_idx_t()\ndata_key: key of data_dict to be used for fitting the model\nuse_mono: use mono exponential model instead of double exponential model if true\n\n\n\n\n\n","category":"function"}]
}
